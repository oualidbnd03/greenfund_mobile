name: Build Signed Release APK

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.0)'
        required: true
        type: string
        default: '1.0.0'
      version_code:
        description: 'Version code (integer)'
        required: true
        type: string
        default: '1'

jobs:
  build:
    name: Build Signed APK
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Clean project
        run: ./gradlew clean

      - name: Setup keystore
        run: |
          # Decode and save keystore file
          echo "${{ secrets.KEYSTORE_FILE }}" > keystore.asc
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSPHRASE }}" --batch keystore.asc > app/release.keystore

      - name: Update version
        run: |
          # Update version in build.gradle
          sed -i "s/versionCode .*$/versionCode ${{ github.event.inputs.version_code }}/" app/build.gradle
          sed -i "s/versionName .*$/versionName \"${{ github.event.inputs.version_name }}\"/" app/build.gradle

      - name: Build signed APK
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
            -PversionCode=${{ github.event.inputs.version_code }} \
            -PversionName=${{ github.event.inputs.version_name }} \
            -Pandroid.injected.signing.store.file=release.keystore \
            -Pandroid.injected.signing.store.password=${SIGNING_STORE_PASSWORD} \
            -Pandroid.injected.signing.key.alias=${SIGNING_KEY_ALIAS} \
            -Pandroid.injected.signing.key.password=${SIGNING_KEY_PASSWORD}

      - name: Verify APK
        run: |
          # Verify the APK was built
          if [ ! -f app/build/outputs/apk/release/app-release.apk ]; then
            echo "Error: Signed APK not found!"
            exit 1
          fi
          
          # Get APK info
          echo "=== Signed APK Information ==="
          echo "Version Name: ${{ github.event.inputs.version_name }}"
          echo "Version Code: ${{ github.event.inputs.version_code }}"
          echo "File Size: $(ls -lh app/build/outputs/apk/release/app-release.apk | awk '{print $5}')"

      - name: Generate SHA-256
        run: |
          echo "APK SHA-256: $(sha256sum app/build/outputs/apk/release/app-release.apk | awk '{print $1}')" > checksum.txt

      - name: Upload signed APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-${{ github.event.inputs.version_name }}
          path: |
            app/build/outputs/apk/release/app-release.apk
            checksum.txt
          retention-days: 90

      - name: Upload build reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports
          path: app/build/reports/
          retention-days: 30

      - name: Cleanup sensitive files
        if: always()
        run: |
          rm -f app/release.keystore
          rm -f keystore.asc
          rm -f app/build/outputs/logs/*

      - name: Create google-services.json
        run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > app/google-services.json

      - name: Decrypt Keystore
        run: |
          echo "DECRYPTING KEYSTORE" 