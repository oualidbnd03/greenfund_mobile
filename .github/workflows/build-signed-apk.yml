name: Build Signed Release APK

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.0)'
        required: true
        type: string
        default: '1.0.0'
      version_code:
        description: 'Version code (integer)'
        required: true
        type: string
        default: '1'

jobs:
  build:
    name: Build Signed APK
    runs-on: ubuntu-latest
    environment: production
    env:
      GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
      SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
      SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Create google-services.json
        run: echo "$GOOGLE_SERVICES_JSON" > app/google-services.json

      - name: Decrypt Keystore & Run Debug
        run: |
          echo "Creating keystore.asc from secret..."
          cat <<EOF > keystore.asc
          $KEYSTORE_FILE
          EOF
          echo "keystore.asc created. Size: $(ls -l keystore.asc | awk '{print $5}')"
          echo "Decrypting keystore..."
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_PASSPHRASE" --output app/release.keystore keystore.asc
          echo "Keystore decrypted. Size: $(ls -l app/release.keystore | awk '{print $5}')"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Clean project
        run: ./gradlew clean

      - name: Update version in build.gradle
        run: |
          sed -i "s/versionCode .*/versionCode ${{ github.event.inputs.version_code }}/" app/build.gradle
          sed -i "s/versionName .*/versionName \"${{ github.event.inputs.version_name }}\"/" app/build.gradle

      - name: Assemble Release APK
        run: ./gradlew assembleRelease

      - name: Verify APK
        run: |
          if [ ! -f app/build/outputs/apk/release/app-release.apk ]; then
            echo "Error: Signed APK not found!"
            exit 1
          fi
          echo "=== Signed APK Information ==="
          echo "Version Name: ${{ github.event.inputs.version_name }}"
          echo "Version Code: ${{ github.event.inputs.version_code }}"
          echo "File Size: $(ls -lh app/build/outputs/apk/release/app-release.apk | awk '{print $5}')"

      - name: Generate SHA-256 checksum
        run: |
          echo "APK SHA-256: $(sha256sum app/build/outputs/apk/release/app-release.apk | awk '{print $1}')" > checksum.txt

      - name: Upload signed APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-${{ github.event.inputs.version_name }}
          path: |
            app/build/outputs/apk/release/app-release.apk
            checksum.txt
          retention-days: 90

      - name: Deep Debug
        if: always()
        run: |
          echo "--- STARTING DEEP DEBUG ---"
          echo "Listing all files in workspace recursively:"
          ls -laR
          echo "--- DEEP DEBUG COMPLETE ---"

      - name: Upload build reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports
          path: app/build/reports/
          retention-days: 30

      - name: Cleanup sensitive files
        if: always()
        run: |
          rm -f app/release.keystore
          rm -f keystore.asc
          rm -f app/build/outputs/logs/* 