name: Build Signed Release APK

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.0)'
        required: true
      version_code:
        description: 'Version code (e.g., 1)'
        required: true

jobs:
  build_signed_apk:
    name: Build Signed Release APK
    runs-on: ubuntu-latest
    environment: production
    env:
      GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
      SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
      SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Create google-services.json
        run: |
          echo "Creating google-services.json..."
          if [ -z "$GOOGLE_SERVICES_JSON" ]; then echo "Error: GOOGLE_SERVICES_JSON secret is not set."; exit 1; fi
          cat <<EOF > app/google-services.json
          $GOOGLE_SERVICES_JSON
          EOF
          echo "google-services.json created successfully."

      - name: Decrypt Keystore
        run: |
          echo "Creating keystore from secret..."
          if [ -z "$KEYSTORE_FILE" ]; then echo "Error: KEYSTORE_FILE secret is not set."; exit 1; fi
          cat <<EOF > release.keystore.asc
          $KEYSTORE_FILE
          EOF
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_PASSPHRASE" --output app/release.keystore release.keystore.asc
          echo "Keystore decrypted successfully."

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Assemble Release APK
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=$(pwd)/app/release.keystore \
            -Pandroid.injected.signing.store.password=$SIGNING_STORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$SIGNING_KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$SIGNING_KEY_PASSWORD \
            -PversionCode=${{ github.event.inputs.version_code }} \
            -PversionName=${{ github.event.inputs.version_name }} \
            --stacktrace

      - name: Verify and Generate Checksum
        run: |
          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "Error: Signed APK not found!"
            exit 1
          fi
          echo "Signed APK generated successfully."
          sha256sum "$APK_PATH" > "checksum.sha256"

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-release-${{ github.event.inputs.version_name }}
          path: |
            app/build/outputs/apk/release/app-release.apk
            checksum.sha256
          retention-days: 90
      
      - name: Upload Build Reports on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: release-build-reports
          path: app/build/reports/
          retention-days: 7

      - name: Cleanup Sensitive Files
        if: always()
        run: |
          echo "Cleaning up sensitive files..."
          rm -f app/release.keystore
          rm -f release.keystore.asc 